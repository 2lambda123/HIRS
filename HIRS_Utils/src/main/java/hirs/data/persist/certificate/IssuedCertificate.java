package hirs.data.persist.certificate;

import hirs.persist.CertificateManager;
import hirs.persist.CertificateSelector;

import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.MappedSuperclass;
import java.io.IOException;
import java.util.Collections;
import java.util.Set;
import java.util.UUID;

/**
 * Represents an issued base certificate to a HIRS Client.
 */
@MappedSuperclass
public abstract class IssuedCertificate extends DeviceAssociatedCertificate {
    /**
     * Issued Certificate label that must be used.
     */
    public static final String AIC_TYPE_LABEL = "TCPA Trusted Platform Identity";
    /**
     * The Attestation Issued Certificate type.
     */
    public static final String ISSUED_TYPE_AK = "AK";
    /**
     * The Local DevID Issued Certificate generated by ACA.
     */
    public static final String ISSUED_TYPE_LDEVID = "LDevID";
    /**
     * The Initial DevID Issued Certificate generated by the OEM.
     */
    public static final String ISSUED_TYPE_IDEVID = "IDevID";

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "ek_id")
    private EndorsementCredential endorsementCredential;

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinColumn(name = "pc_id")
    private Set<PlatformCredential> platformCredentials;

    @Column
    private String issuedType = "UNK";

    /**
     * This class enables the retrieval of IssuedCertificate by their attributes.
     */
    public static class Selector extends CertificateSelector<IssuedCertificate> {
        /**
         * Construct a new CertificateSelector that will use
         * the given {@link hirs.persist.CertificateManager} to
         * retrieve one or many IssuedCertificate.
         *
         * @param certificateManager the certificate manager to be used to retrieve certificates
         */
        public Selector(final CertificateManager certificateManager) {
            super(certificateManager, IssuedCertificate.class);
        }

        /**
         * Specify a device id that certificates must have to be considered
         * as matching.
         *
         * @param device the device id to query
         * @return this instance (for chaining further calls)
         */
        public IssuedCertificate.Selector byDeviceId(final UUID device) {
            setFieldValue(DEVICE_ID_FIELD, device);
            return this;
        }
    }

    /**
     * Get a Selector for use in retrieving IssuedCertificate.
     *
     * @param certMan the CertificateManager to be used to retrieve persisted certificates
     * @return a IssuedCertificate.Selector instance to use for retrieving certificates
     */
    public static IssuedCertificate.Selector select(final CertificateManager certMan) {
        return new IssuedCertificate.Selector(certMan);
    }

    /**
     * Default constructor for Hibernate.
     */
    protected IssuedCertificate() {
    }

    /**
     * Constructor.
     * @param certificateBytes the issued certificate bytes
     * @param endorsementCredential the endorsement credential
     * @param platformCredentials the platform credentials
     * @throws IOException if there is a problem extracting information from the certificate
     */
    public IssuedCertificate(final byte[] certificateBytes,
                             final EndorsementCredential endorsementCredential,
                             final Set<PlatformCredential> platformCredentials) throws IOException {
        super(certificateBytes);
        this.endorsementCredential = endorsementCredential;
        this.platformCredentials = platformCredentials;
    }

    /**
     * Getter for the type of Issued Certificate.
     * @return the string of the type
     */
    public String getIssuedType() {
        return issuedType;
    }

    /**
     * Setter for the type of the Issued Certificate.
     * @param issuedType the String variable of the type
     */
    public void setIssuedType(final String issuedType) {
        this.issuedType = issuedType;
    }

    /**
     *
     * @return the Endorsement Credential
     */
    public EndorsementCredential getEndorsementCredential() {
        return endorsementCredential;
    }

    /**
     *
     * @return the platform credential
     */
    public Set<PlatformCredential> getPlatformCredentials() {
        return Collections.unmodifiableSet(platformCredentials);
    }
}
