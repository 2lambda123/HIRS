#!/bin/bash

# certificates and key stores generated by this script
CERTIFICATES="/etc/hirs/certificates"
CA_CERT=${CERTIFICATES}/hirs.ca.cert
INTERNAL_P12=${CERTIFICATES}/hirs.p12
KEYSTORE_JKS=${CERTIFICATES}/keyStore.jks
TRUSTSTORE_JKS=${CERTIFICATES}/TrustStore.jks
CA_CERT_DIR_ESCAPED=\\/etc\\/hirs\\/certificates

if [ -z $CATALINA_HOME ]; then
   CATALINA_HOME=/opt/tomcat
fi
TOMCAT_CONF=${CATALINA_HOME}/conf/tomcat.conf
TOMCAT_SERVICE=tomcat

# 'private' data generated by this script
CA_PEM=${CERTIFICATES}/private/hirs.ca.pem
P12_DATA=${CERTIFICATES}/private/p12.data

# Check if we're in a Docker container
if [ -f /.dockerenv ]; then
    DOCKER_CONTAINER=true
else
    DOCKER_CONTAINER=false
fi

#########################
# ACA TLS Key Generation
#########################
function aca_tls_keygen {
    # if the CA PEM file does not exist, generate the HIRS CA file and associated keystore and truststores
    if ! [ -f $CA_PEM ]; then
        echo 'Generating certificates'
        # create directory structure
        mkdir -p ${CERTIFICATES}/private

        # Generate our random key store password.  We need to do this before  configuring Tomcat, as we'll
        # need to add it to Tomcat's configuration file. Read a block of raw data bytes from /dev/urandom
        # and convert it to text characters.
        echo 'Creating random key material'
        P12_PASSWORD=$(head -c 64 /dev/urandom | md5sum | tr -dc 'a-zA-Z0-9')

        # generate a key and certificate. The key is the private key used to sign the well known CA cert.
        echo 'Creating 2048 bit key'
        openssl req -x509 -nodes -days 3652 -newkey rsa:2048 -keyout ${CA_PEM} -out ${CA_CERT} -subj "/C=US/O=HIRS/OU=Common/CN=$(hostname)"

        # export the certificate and key as a p12 file
        echo 'Exporting key'
        openssl pkcs12 -export -in ${CA_CERT} -inkey ${CA_PEM} -out ${INTERNAL_P12} -passout pass:${P12_PASSWORD}

        # create a key store using the pk12 file.
        echo 'Configuring keystore'
        keytool -importkeystore -srckeystore ${INTERNAL_P12} -destkeystore ${KEYSTORE_JKS} -srcstoretype pkcs12 -srcstorepass ${P12_PASSWORD} -deststoretype jks -deststorepass ${P12_PASSWORD} -noprompt

        # import the root CA certificate into the trust store.
        echo 'Configuring truststore'
        keytool -import -keystore ${TRUSTSTORE_JKS} -storepass password -file ${CA_CERT} -noprompt

        # write P12 password to file
        echo $P12_PASSWORD > $P12_DATA

        # set appropriate permissions on certificates
        chmod 775 /etc/hirs/certificates/
        chmod -R 664 /etc/hirs/certificates/*
        chmod 700 /etc/hirs/certificates/private
        chmod -R 600 /etc/hirs/certificates/private/*
    else
        # if the certificate was previously generated, grab the P12 password out of the file
        P12_PASSWORD=`cat $P12_DATA`
    fi
}
#################
# Tomcat
#################
function setup_tomcat_tls {
    if [[ -z `grep -o "keystoreFile=\"${CA_CERT_DIR_ESCAPED}\/keyStore.jks\"" $CATALINA_HOME/conf/server.xml` ]]; then
        echo "Configuring Tomcat SSL"

        chown -R root:tomcat /etc/hirs/certificates/

        # create an alias in the keystore for tomcat
        alias=$(keytool -list -v -keystore ${KEYSTORE_JKS} -storepass ${P12_PASSWORD} | grep -B2 'PrivateKeyEntry' | grep 'Alias name:')
        keytool -changealias -alias ${alias#*:} -destalias tomcat -v -keystore ${KEYSTORE_JKS} -storepass ${P12_PASSWORD}

        # Set up Tomcat.  We need to ensure that Tomcat is not running
        ${CATALINA_HOME}/bin/catalina.sh stop

        # Configure Tomcat SSL properly.  The method for doing this changes from 6.0.38 onward.
        sed -i "s/.*<\/Service>/<Connector port=\"8443\" protocol=\"HTTP\/1.1\" compression=\"on\" compressionMinSize=\"2048\" compressableMimeType=\"text\/html, text\/xml\" SSLEnabled=\"true\" maxThreads=\"150\" scheme=\"https\" secure=\"true\" clientAuth=\"want\" sslProtocol=\"TLS\" sslEnabledProtocols=\"TLSv1.1,TLSv1.2\" ciphers=\"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA\" keystoreFile=\"${CA_CERT_DIR_ESCAPED}\/keyStore.jks\" keystorePass=\"$P12_PASSWORD\" truststoreFile=\"${CA_CERT_DIR_ESCAPED}\/TrustStore.jks\" truststorePass=\"password\" \/><\/Service>/" $CATALINA_HOME/conf/server.xml
        # Enable tomcat manager for debuggin purposes    
        sed -i 's/.*<\/tomcat-users>/<user username="tomcat" password="tomcat" roles="admin,admin-gui,manager,manager-gui"\/> <\/tomcat-users>/' $CATALINA_HOME/conf/tomcat-users.xml

        # ensure tomcat is using the trust store and key store for all other SSL operations.
        cat << EOF >> ${TOMCAT_CONF}
#begin-hirs-conf
JAVA_OPTS="-Djavax.sql.DataSource.Factory=org.apache.commons.dbcp.BasicDataSourceFactory -Xmx1536m -Djavax.net.ssl.keyStore=${KEYSTORE_JKS} -Djavax.net.ssl.keyStorePassword=${P12_PASSWORD} -Djavax.net.ssl.trustStore=${TRUSTSTORE_JKS} -Djavax.net.ssl.trustStorePassword=password"
#end-hirs-conf
EOF
        # set tomcat user as owner of tomcat installation
        chgrp -R tomcat ${CATALINA_HOME}

        # restart tomcat 
        ${CATALINA_HOME}/bin/catalina.sh start &
     
        # Wait for Tomcat to boot completely
        until [[ $(ss -ltn | grep 8080) == *"8080"* ]]; do 
          : 
        done; 
    fi
}
#################
# MySQL/MariaDB
#################
function setup_mariadb_tls {
    MYSQL_CERT_DIR=/etc/hirs/certificates/mysql/

    if ! [[ -d $MYSQL_CERT_DIR ]]; then
        echo "Configuring MySQL SSL"

        # apply MySQL SSL configuration:
        mkdir -p $MYSQL_CERT_DIR

        # copy CA cert over
        cp $CA_CERT $MYSQL_CERT_DIR/

        # convert p12 key to pem
        openssl pkcs12 -in $INTERNAL_P12 -out $MYSQL_CERT_DIR/hirs.pem -nodes -passin pass:${P12_PASSWORD} -passout pass:

        # extract cert from pem into its own file
        openssl x509 -in $MYSQL_CERT_DIR/hirs.pem -outform PEM -out $MYSQL_CERT_DIR/hirs-cert.pem

        # extract key from pem into its own file
        openssl pkey -in $MYSQL_CERT_DIR/hirs.pem -outform PEM -out $MYSQL_CERT_DIR/hirs-key.pem

        # make readable to user named 'mysql'
        chgrp -R mysql $MYSQL_CERT_DIR
        chmod -R 770 $MYSQL_CERT_DIR

        # update MySQL/MariaDB SSL and index configuration
        MYSQL_ADDITIONS_FILE=/opt/hirs/scripts/common/my.cnf.el7
        sed -i "/\[mysqld\]/r $MYSQL_ADDITIONS_FILE" /etc/my.cnf

        if [ $DOCKER_CONTAINER  = true ]; then
        # If in Docker container, avoid services that invoke the D-Bus
            if [[ $(pgrep -c -u mysql mysqld) -ne 0 ]]; then
               echo "MariaDB is running, so we'll need to restart it."
               mysqladmin shutdown
               nohup /usr/bin/mysqld_safe  &>/dev/null &
            fi
        else
            SQL_SERVICE=`/opt/hirs/scripts/common/get_db_service.sh`
            service $SQL_SERVICE restart
        fi
        # Wait for mysql to start before continuing.
        echo "Checking mysqld status..."
        while ! mysqladmin ping -h "$localhost" --silent; do
           :
        done
    fi
}

aca_tls_keygen
setup_tomcat_tls
#setup_mariadb_tls